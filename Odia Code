# 1 creat a class called person 
class Person: 
    def __init__(self, name, age, id): 
        self.name = name 
        self.age = age 
        self.id = id 
     
    def __str__(self): 
        return f"{self.name} (ID: {self.id}, Age: {self.age})" 
 
# 2 develop a student class that inherits 
class Student(Person): 
    def __init__(self, name, age, id, major): 
        super().__init__(name, age, id) 
        self.major = major 
        self.enrolled_courses = [] 
     
    def enrol(self, course): 
        if len(course.enrolled_students) < course.max_capacity: 
            course.add_student(self) 
            self.enrolled_courses.append(course) 
        else: 
            print(f"Cannot enroll in {course.name}: Course is at full capacity.") 
     
    def drop(self, course): 
        if course in self.enrolled_courses: 
            course.remove_student(self) 
            self.enrolled_courses.remove(course) 
        else: 
            print(f"Cannot drop {course.name}: Not enrolled in the course.") 
     
    def __str__(self): 
        return f"{super().__str__()} (Major: {self.major})" 
 
# 3 creat a professor class that inherits from the person class 
class Professor(Person): 
    def __init__(self, name, age, id, department): 
        super().__init__(name, age, id) 
        self.department = department 
        self.courses_teaching = [] 
     
    def assign_course(self, course): 
        self.courses_teaching.append(course) 
        course.professor = self 
     
    def __str__(self): 
        return f"{super().__str__()} (Department: {self.department})" 
 
# 4 Design a Course class  
class Course: 
    def __init__(self, course_code, name, max_capacity): 
        self.course_code = course_code 
        self.name = name 
        self.max_capacity = max_capacity 
        self.professor = None 
        self.enrolled_students = [] 
     
    def add_student(self, student): 
        if len(self.enrolled_students) < self.max_capacity: 
            self.enrolled_students.append(student) 
        else: 
            print(f"Cannot add {student.name} to {self.name}: Course is at full capacity.") 
     
    def remove_student(self, student): 
        if student in self.enrolled_students: 
            self.enrolled_students.remove(student) 
        else: 
            print(f"{student.name} is not enrolled in {self.name}.") 
     
    def __str__(self): 
        prof_name = self.professor.name if self.professor else "No professor assigned" 
        return f"Course: {self.name} (Code: {self.course_code}, Capacity: {self.max_capacity}, Professor: {prof_name})" 
 
# 5 develop a University  
class University: 
    def __init__(self, name): 
        self.name = name 
        self.courses = [] 
        self.students = [] 
        self.professors = [] 
     
    def add_course(self, course): 
        self.courses.append(course) 
     
    def add_student(self, student): 
        self.students.append(student) 
     
    def add_professor(self, professor): 
        self.professors.append(professor) 
     
    def get_course(self, course_code): 
        for course in self.courses: 
            if course.course_code == course_code: 
                return course 
        print(f"Course with code {course_code} not found.") 
        return None 
     
    def __str__(self): 
        return f"{self.name} University" 
 
 
# Example usage 
uni = University("Richfield") 
 
 
course1 = Course("CS101", "Intro to programming", 2) 
course2 = Course("MATH101", "Calculus I", 3) 
uni.add_course(course1) 
uni.add_course(course2) 
 
 
prof1 = Professor("Mr.Prince", 40, "P123", "progrmming") 
prof1.assign_course(course1) 
uni.add_professor(prof1) 
 
 
student1 = Student("Ben mbayo", 20, "S001", "programming") 
student2 = Student("jhon", 21, "S002", "Mathematics") 
uni.add_student(student1) 
uni.add_student(student2) 
 
student1.enrol(course1)   
student2.enrol(course1)   
 
print(course1) 
print(student1) 
print(prof1) 

